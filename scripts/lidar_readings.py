#!/usr/bin/env python

import rospy
from sensor_msgs.msg import LaserScan
import numpy as np
import matplotlib.pyplot as plt
from grasp_voa.srv import ProcessedPoints
from grasp_voa.msg import Point2D


class LidarReadings:
    def __init__(self):
        rospy.init_node('lidar_reader_node', anonymous=True)
        rospy.Subscriber('/scan', LaserScan, self.lidar_callback)
        rospy.Service('/lidar_processed_readings', ProcessedPoints, self.get_readings)
        self.lidar_readings = None
        self.plot = True
        self.readings_2d = np.zeros((2, 360))
        self.clean_readings = []

    def get_readings(self, req):
        res = [Point2D(x=self.clean_readings[i][0], y=self.clean_readings[i][1]) for i in
               range(len(self.clean_readings))]
        return res

    def lidar_callback(self, msg: LaserScan):
        if self.lidar_readings is None:
            angle = msg.angle_min
            inc = msg.angle_increment
            self.lidar_readings = np.array(msg.ranges)
            for i, dis in enumerate(self.lidar_readings):
                if dis != np.inf:
                    self.readings_2d[0, i] = dis * np.cos(angle)
                    self.readings_2d[1, i] = dis * np.sin(angle)
                    if 0.5 <= dis < 1.0 and (0 <= angle <= np.radians(30) or np.radians(330) <= angle <= msg.angle_max):
                        self.clean_readings.append([self.readings_2d[0, i], self.readings_2d[1, i]])
                        print(angle, dis)
                    angle += inc
            self.clean_readings = self.readings_2d
            if self.plot:
                plt.scatter(self.readings_2d[0, :], self.readings_2d[1, :], s=1)  # 's' controls the size of the points
                plt.xlabel('X')
                plt.ylabel('Y')
                plt.title('Lidar Readings as 2D Points')

                plt.show()


if __name__ == '__main__':
    lr = LidarReadings()
    rospy.spin()

# def lidar_to_image(lidar_readings):
#     angles = np.deg2rad(np.arange(0, 360))  # Convert degrees to radians
#     distances = np.array(lidar_readings)
#
#     # Convert polar coordinates to Cartesian coordinates
#     x = distances * np.cos(angles)
#     y = distances * np.sin(angles)
#
#     # Create the image
#     plt.scatter(x, y, s=1)  # 's' controls the size of the points
#     plt.xlabel('X')
#     plt.ylabel('Y')
#     plt.title('Lidar Readings as 2D Points')
#
#     plt.show()
#
#
# if __name__ == '__main__':
#     # Example lidar readings (replace with your actual readings)
#     lidar_readings = [0.4650000035762787, 0.4690000116825104, 0.4749999940395355, 0.6200000047683716, 0.0, 0.4410000145435333, 0.4339999854564667, 0.4269999861717224, 0.4339999854564667, 0.43799999356269836, 0.4560000002384186, 0.0, 2.9790000915527344, 2.9059998989105225, 2.8940000534057617, 2.88100004196167, 2.882999897003174, 2.8580000400543213, 2.8310000896453857, 2.8340001106262207, 2.8350000381469727, 2.8329999446868896, 2.819000005722046, 2.8269999027252197, 2.812999963760376, 2.809999942779541, 2.799999952316284, 0.0, 0.0, 0.0, 0.0, 0.0, 2.881999969482422, 2.8389999866485596, 0.0, 0.0, 0.0, 1.840999960899353, 1.1729999780654907, 1.0440000295639038, 1.406000018119812, 1.3079999685287476, 1.2389999628067017, 1.1749999523162842, 1.0809999704360962, 1.0299999713897705, 0.9589999914169312, 0.9589999914169312, 0.6809999942779541, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.40299999713897705, 0.40299999713897705, 0.45100000500679016, 0.47699999809265137, 0.4690000116825104, 0.460999995470047, 0.45500001311302185, 0.4490000009536743, 0.4429999887943268, 0.4359999895095825, 0.4300000071525574, 0.42500001192092896, 0.41999998688697815, 0.41499999165534973, 0.4099999964237213, 0.4059999883174896, 0.4020000100135803, 0.39899998903274536, 0.39500001072883606, 0.3919999897480011, 0.3889999985694885, 0.38499999046325684, 0.38100001215934753, 0.3779999911785126, 0.37299999594688416, 0.367000013589859, 0.36000001430511475, 0.35899999737739563, 0.3580000102519989, 0.35600000619888306, 0.35499998927116394, 0.3540000021457672, 0.3479999899864197, 0.3490000069141388, 0.3490000069141388, 0.3449999988079071, 0.3449999988079071, 0.34599998593330383, 0.3440000116825104, 0.34299999475479126, 0.34200000762939453, 0.34299999475479126, 0.3440000116825104, 0.34599998593330383, 0.3490000069141388, 0.3479999899864197, 0.3490000069141388, 0.3499999940395355, 0.35100001096725464, 0.35100001096725464, 0.35199999809265137, 0.35199999809265137, 0.35199999809265137, 0.35199999809265137, 0.3529999852180481, 0.3529999852180481, 0.3540000021457672, 0.35600000619888306, 0.3569999933242798, 0.35899999737739563, 0.36000001430511475, 0.3610000014305115, 0.3630000054836273, 0.36500000953674316, 0.367000013589859, 0.36899998784065247, 0.3709999918937683, 0.37299999594688416, 0.37599998712539673, 0.3790000081062317, 0.38199999928474426, 0.38499999046325684, 0.3889999985694885, 0.3919999897480011, 0.39500001072883606, 0.39899998903274536, 0.40299999713897705, 0.40700000524520874, 0.41100001335144043, 0.41499999165534973, 0.41999998688697815, 0.42500001192092896, 0.4300000071525574, 0.4350000023841858, 0.4410000145435333, 0.44699999690055847, 0.453000009059906, 0.45899999141693115, 0.4659999907016754, 0.4729999899864197, 0.47999998927116394, 0.48899999260902405, 0.49799999594688416, 0.5080000162124634, 0.515999972820282, 0.5249999761581421, 0.5350000262260437, 0.5460000038146973, 0.5569999814033508, 0.5690000057220459, 0.5820000171661377, 0.593999981880188, 0.6060000061988831, 0.6159999966621399, 0.6200000047683716, 0.6439999938011169, 0.6579999923706055, 0.6790000200271606, 0.6890000104904175, 0.6840000152587891, 0.7110000252723694, 0.7390000224113464, 0.7549999952316284, 0.7870000004768372, 0.8309999704360962, 0.8769999742507935, 0.8980000019073486, 0.9390000104904175, 0.9940000176429749, 1.069000005722046, 0.8159999847412109, 0.8159999847412109, 0.8560000061988831, 1.3990000486373901, 1.4119999408721924, 0.5809999704360962, 0.6169999837875366, 0.0, 0.0, 0.0, 0.0, 0.0, 1.975000023841858, 1.9630000591278076, 1.9700000286102295, 1.9570000171661377, 1.9589999914169312, 1.965000033378601, 1.9620000123977661, 1.9869999885559082, 1.9420000314712524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8949999809265137, 0.0, 0.0, 0.0, 0.0, 0.0, 3.802999973297119, 4.0929999351501465, 0.0, 3.0420000553131104, 0.0, 2.322999954223633, 0.0, 2.2249999046325684, 2.1740000247955322, 2.200000047683716, 2.2249999046325684, 2.256999969482422, 2.260999917984009, 2.315999984741211, 2.184000015258789, 2.13100004196167, 2.0769999027252197, 2.0339999198913574, 1.9670000076293945, 1.902999997138977, 1.8990000486373901, 1.8370000123977661, 1.7879999876022339, 1.753999948501587, 0.0, 0.0, 2.0850000381469727, 2.0320000648498535, 1.9759999513626099, 1.9459999799728394, 1.937999963760376, 1.9780000448226929, 2.006999969482422, 2.066999912261963, 2.115999937057495, 2.1589999198913574, 2.2090001106262207, 2.250999927520752, 2.3459999561309814, 3.256999969482422, 3.6730000972747803, 3.5880000591278076, 3.5880000591278076, 3.571000099182129, 3.503999948501587, 3.450000047683716, 3.489000082015991, 3.427999973297119, 3.430000066757202, 3.3919999599456787, 3.374000072479248, 3.322999954223633, 3.315999984741211, 3.2809998989105225, 3.2639999389648438, 3.2720000743865967, 3.2309999465942383, 3.2260000705718994, 3.190999984741211, 3.203000068664551, 3.1689999103546143, 3.1559998989105225, 3.1470000743865967, 3.134000062942505, 1.718000054359436, 1.6480000019073486, 1.6649999618530273, 1.6679999828338623, 1.6230000257492065, 1.593000054359436, 1.5880000591278076, 1.5920000076293945, 1.5950000286102295, 1.6019999980926514, 1.628999948501587, 1.6390000581741333, 1.5980000495910645, 1.6449999809265137, 1.5820000171661377, 1.6469999551773071, 3.0989999771118164, 3.0739998817443848, 3.061000108718872, 3.1540000438690186, 3.124000072479248, 3.188999891281128, 3.2109999656677246, 3.2109999656677246, 3.2290000915527344, 3.25, 3.303999900817871, 3.2960000038146973, 3.313999891281128, 3.3499999046325684, 3.3529999256134033, 3.367000102996826, 3.38700008392334, 3.4230000972747803, 3.4649999141693115, 3.4019999504089355, 3.5290000438690186, 3.50600004196167, 0.3700000047683716, 0.3700000047683716, 0.35499998927116394, 0.3490000069141388, 0.3440000116825104, 0.3400000035762787, 0.33799999952316284, 0.3370000123977661, 0.3370000123977661, 0.3370000123977661, 0.33899998664855957, 0.3440000116825104, 0.3479999899864197, 0.35199999809265137, 0.3569999933242798, 0.3610000014305115, 0.3619999885559082, 0.37599998712539673, 0.38999998569488525, 0.4059999883174896, 0.41600000858306885, 0.4350000023841858, 0.4440000057220459, 0.4410000145435333, 0.44699999690055847, 0.44999998807907104, 0.44999998807907104, 0.4519999921321869, 0.453000009059906, 0.45399999618530273, 0.4569999873638153, 0.46000000834465027]
#
#     # Convert lidar readings to a 2D point image
#     lidar_to_image(lidar_readings)
